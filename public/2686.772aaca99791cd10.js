"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[2686],{313:(S,d,s)=>{s.d(d,{W:()=>a});const a="W"},6280:(S,d,s)=>{s.d(d,{D:()=>l});var a=s(655),i=s(8256),c=s(4731);let l=(()=>{class N{constructor(r){this.alertController=r}presentAlert(r,T){return(0,a.mG)(this,void 0,void 0,function*(){yield(yield this.alertController.create({header:"Confirmaci\xf3n",message:r,mode:"ios",buttons:[{text:"Cancelar",role:"cancel"},{text:"Aceptar",role:"confirm",handler:T}]})).present()})}}return N.\u0275fac=function(r){return new(r||N)(i.LFG(c.Br))},N.\u0275prov=i.Yz7({token:N,factory:N.\u0275fac,providedIn:"root"}),N})()},3269:(S,d,s)=>{s.d(d,{k:()=>U});var a=s(655),i=s(2340);const N=[[1,"1",0,"",1,1,1,"Nombre de la calle","FREETEXT",""],[1,"2",0,"",1,2,1,"Entre qu\xe9 calles se encuentra el tramo","FREETEXT",""],[1,"3",0,"",1,3,1,"Tipo funcional de calle",`${JSON.stringify([{v:1,t:"Acceso controlado (AC)"},{v:2,t:"Avenida (AV)"},{v:3,t:"Colectora (CO)"},{v:4,t:"Calle Local (LO)"}])}`,""],[1,"4",0,"",1,4,1,"Sentidos",`${JSON.stringify([{v:1,t:"Un solo sentido"},{v:2,t:"Doble sentido"}])}`,""],[1,"5",0,"S-1-4-1",1,5,1,"N\xfamero de carriles","ONEDIGIT",""],[1,"5",0,"S-1-4-2",1,5,1,"N\xfamero de carriles por sentido","ONEDIGIT",""],[2,"S1",0,"E-1-3",1,1,1,"\xbfCu\xe1l es la velocidad m\xe1xima permitida?",`${JSON.stringify([{v:1,t:"AC < 80 km/h"},{v:2,t:"AV < 50 km/h"},{v:3,t:"CO < 40 km/h"},{v:4,t:"LO <30 km/h"}])}`,""],[2,"S2",0,"",1,2,1,"\xbfCuenta con se\xf1ales de reducci\xf3n de velocidad?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Marcas en pavimento o se\xf1ales"],[2,"S3.1",0,"D-1-5-<:3:2:1",1,3,1,"\xbfCuenta con menos de 3 carriles contando franja de estacionamiento?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S3.2",0,"",1,4,1,"\xbfLa secci\xf3n del arrollo vehicular mide 9 metros o menos?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Considerar la distacnia entre guarniciones, o de banqueta a banqueta."],[2,"S3",1,"",1,5,1,"\xbfEl dise\xf1o del tramo se considera de baja velocidad?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S4",1,"",1,6,1,"\xbfCuenta con reductores de velocidad?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Reductor de velocidad [plataforma/tope/vibrador"],[2,"S5.1",0,"",1,7,1,"\xbfExisten accesos a cocheras presentes en el tramo a analizar?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S5.2",0,"S-2-S5.1-1",1,8,1,"En caso de existir cocheras, \xbfestas tienen una longitud de 6 metros o menos?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S5.3",0,"S-2-S5.1-1",1,9,1,"\xbfLa banqueta mantiene su nivel en los accesos a cocheras?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S5.4",1,"S-2-S5.1-1",1,10,1,"\xbfLos accesos a las cocheras son seguros?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S6",1,"",1,11,1,"\xbfLa banqueta cuenta con protecci\xf3n adicional dada la presencia de ciclov\xeda, estacionamiento o franja de \xe1rboles?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[2,"S7",1,"",1,12,1,"\xbfExiste presencia de infraestructura ciclista?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Ciclov\xeda en avenidas/Ciclocarril en colectoras"],[2,"S8",1,"",1,13,1,"\xbfLa banqueta cuenta con iluminaci\xf3n nocturna?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Porcentaje del \xe1rea peatonal iluminada"],[2,"S9",1,"",1,14,1,"\xbfLa calle promueve la actividad durante el d\xeda?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Mezcla de usos y fachadas activas"],[3,"S10",1,"",1,1,1,"\xbfExisten sem\xe1foros que prioricen el cruce de los peatones?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Sem\xe1foro en avenida primaria o colectora"],[3,"S11",1,"",1,2,1,"\xbfLa geometr\xeda de las esquinas prioriza el cruce por encima del giro de los veh\xedculos?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Radio de giro < 6 metros [sujeto a la geometr\xeda vial"],[3,"S12",1,"",1,3,1,"\xbfEl n\xfamero de carriles en cada una de las calles que se intersectan es menor a 3?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Carriles que se cruzan de manera continua < 3"],[3,"S13",1,"",1,4,1,"\xbfLas esquinas cuentan con protecciones para peatones? (Bolardos)",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Bolardos en esquinas de avenidas primarias"],[3,"S14",1,"",1,5,1,"\xbfEl \xe1rea de la intersecci\xf3n ofrece una libre perspectiva visual?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Todas las esquinas sin obst\xe1culos a la visibilidad"],[3,"S15",1,"",1,6,1,"\xbfEl \xe1rea de la intersecci\xf3n cuenta con iluminaci\xf3n nocturna?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Todos los cruces peatonales con iluminaci\xf3n nocturna"],[4,"AC1",1,"",1,1,1,"\xbfLa superficie de la banqueta del tramo es continua?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Ninguna discontinuidad en banqueta para silla de ruedas"],[4,"AC2",1,"",1,2,1,"\xbfLa textura del pavimento tiene buen agarre, inclusive al humedecerse?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Sin puntos de acumulaci\xf3n de agua o pavimento resbaloso"],[4,"AC3",1,"",1,3,1,"\xbfLa franja por donde se puede caminar libremente en la banqueta, tiene un ancho igual o mayor a 2.5 metros?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Secci\xf3n efectiva de la franja peatonal > 2.5 metros"],[4,"AC4",1,"",1,4,1,"\xbfLa banqueta est\xe1 libre de aglomeraciones de personas en las horas de m\xe1xima demanda?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"No hay ning\xfan punto con saturaci\xf3n peatonal en horas de m\xe1xima demanda"],[4,"AC5",1,"",1,5,1,"\xbfEs posible cruzar con facilidad a media cuadra?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"No existen rejas o barreras que impiden el cruce"],[4,"AC6",1,"",1,6,1,"Marcas claras de carriles y sentidos",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Se\xf1alamientos de carriles y sentidos"],[5,"AC7",1,"",1,1,1,"\xbfLas banquetas, rampas y guarniciones son de buena calidad?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Son de materiales resistentes y con textura apropiada"],[5,"AC8",1,"",1,2,1,"\xbfLas esquinas presentan rampas con pendientes apropiadas que resuelven todos los cruces?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Todas las esquinas son accesibles"],[5,"AC9",1,"",1,3,1,"\xbfLas l\xedneas de deseo pueden caminarse libremente?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Las trayectorias peatonales de cruce se hacen de manera directa"],[5,"AC10",1,"",1,4,1,"\xbfLas cebras peatonales est\xe1n clara y correctamente pintadas?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Marcas de rayas de cruce peatonal y l\xednea de alto"],[5,"AC11",1,"",1,5,1,"\xbfLos cruces cuentan con gu\xedas podot\xe1ctiles?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Al menos se\xf1ales de alerta en los bordes de la banqueta antes del cruce."],[5,"AC12",1,"",1,6,1,"\xbfLos cruces cuentan con sem\xe1foros auditivos?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Superficies podot\xe1ctiles y sem\xe1foros accesibles"],[5,"AC13",1,"",1,7,1,"Dise\xf1o intuitivo",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Dise\xf1o f\xe1cil de comprender para todas las personas"],[6,"CO1",1,"",1,1,1,"\xbfLa franja peatonal est\xe1 libre de obst\xe1culos que entorpezcan el caminar?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Sin obst\xe1culos fijos o m\xf3viles que reducen la secci\xf3n"],[6,"CO2",1,"",1,2,1,"\xbfExisten \xe1rboles que cubran del sol m\xe1s del 50% de la franja peatonal?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Franja peatonal > 50% con cobertura de fronda de \xe1rboles"],[6,"CO3",1,"",1,3,1,"\xbfExiste una franja de jardinera o de \xe1rboles?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Franja de \xe1rea verde o \xe1rboles"],[6,"CO4",1,"",1,4,1,"\xbfExisten marquesinas o balcones que cubran m\xe1s del 25% de la franja peatonal?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Franja peatonal > 25% con techos adosados o balcones"],[6,"CO5",0,"",1,5,1,"\xbfExisten paradas de transporte p\xfablico?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,""],[6,"CO6",1,"S-6-CO5-1",1,6,1,"\xbfLas paradas de transporte p\xfablico tienen una techumbre que proteja adecuadamente del sol y la lluvia?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Paradas de transporte p\xfablico con techo"],[6,"CO7",1,"",1,7,1,"\xbfExisten espacios de ocio o descanso?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Bancas, juegos, fuentes, etc. al menos a dos cuadras."],[7,"CO8",1,"",1,1,1,"\xbfExisten obst\xe1culos que entorpezcan el cruce a pie?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Obst\xe1culos como piedras, coladeras, hoyos, botes, postes, etc."],[7,"CO9",1,"",1,2,1,"\xbfEl tiempo de espera para cruzar es menor a 30 segundos?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Tiempo bajo de espera para cruzar"],[7,"CO10",1,"",1,3,1,"\xbfEl tiempo para atravesar el cruce peatonal es suficiente?",`${JSON.stringify([{v:1,t:"S\xed"},{v:2,t:"No"}])}`,"Tiempo suficiente para cruzar la calle"]],L=`\n  INSERT INTO sections (uid, name, subname, page, indx, status) VALUES\n  ${[["S1","CARACTER\xcdSTICAS DE LA CALLE","",1,1,1],["S2","SEGURIDAD","Tramo de calle",2,2,1],["S3","SEGURIDAD","Intersecci\xf3n",3,3,1],["S4","ACCESIBILIDAD","Tramo de calle",4,4,1],["S5","ACCESIBILIDAD","Intersecci\xf3n",5,5,1],["S6","CONFORT","Tramo de calle",6,6,1],["S7","CONFORT","Intersecci\xf3n",7,7,1]].map(t=>`("${t[0]}", "${t[1]}", "${t[2]}", ${t[3]}, ${t[4]}, ${t[5]})`).join(",")};\n\n  INSERT INTO questions (section_id, uid, score, cond, has_evidence, indx, status, sentence, answers, popup) VALUES\n  ${N.map(t=>`(${t[0]}, "${t[1]}", ${t[2]}, "${t[3]}", ${t[4]}, ${t[5]}, ${t[6]}, "${t[7]}", '${t[8]}', "${t[9]}")`).join(",")};\n\n  INSERT INTO versions (name, number) VALUES ("ORIGINAL", 1);\n`;var v=s(1135),m=s(5698),I=s(313),u=s(8256),_=s(249),A=s(2414);let U=(()=>{class t{constructor(e,o){this._sqlite=e,this.responseService=o}checkDatabaseVersion(){return(0,a.mG)(this,void 0,void 0,function*(){return new Promise((o,n)=>{this.executeQuery("SELECT * FROM versions ORDER BY id DESC ;").subscribe(E=>(0,a.mG)(this,void 0,void 0,function*(){E!==I.W&&(E.includes&&E.includes("no such table: versions")?(yield this.createDatabase(),o("new")):o(E))}))})})}executeQuery(e){const o=new v.X(I.W);return this._sqlite.createConnection(i.lj.name,i.lj.encrypted,i.lj.mode,i.lj.version).then(n=>(0,a.mG)(this,void 0,void 0,function*(){this.sendQuery(n,e,o)})).catch(n=>(0,a.mG)(this,void 0,void 0,function*(){this._sqlite.retrieveConnection(i.lj.name).then(E=>(0,a.mG)(this,void 0,void 0,function*(){this.sendQuery(E,e,o)})).catch(()=>{this._sqlite.createConnection(i.lj.name,i.lj.encrypted,i.lj.mode,i.lj.version).then(E=>(0,a.mG)(this,void 0,void 0,function*(){this.sendQuery(E,e,o)}))})})),o.asObservable().pipe((0,m.q)(2))}sendQuery(e,o,n){return(0,a.mG)(this,void 0,void 0,function*(){yield e.open(),null==e||e.query(o).then(E=>(0,a.mG)(this,void 0,void 0,function*(){(yield e.isDBOpen())&&e.close().then(()=>(0,a.mG)(this,void 0,void 0,function*(){n.next(E)})).catch(O=>this.responseService.onError(O,"No se pudo ejecutar el query"))})).catch(E=>(0,a.mG)(this,void 0,void 0,function*(){(yield e.isDBOpen())&&e.close().then(()=>(0,a.mG)(this,void 0,void 0,function*(){n.next(`error: ${E.message}`)})).catch(O=>this.responseService.onError(O,"No se pudo ejecutar el query"))}))})}createDatabase(){return(0,a.mG)(this,void 0,void 0,function*(){this._sqlite.createConnection(i.lj.name,i.lj.encrypted,i.lj.mode,i.lj.version).then(e=>(0,a.mG)(this,void 0,void 0,function*(){this.sendCreateDatabase(e)})).catch(e=>(0,a.mG)(this,void 0,void 0,function*(){this._sqlite.retrieveConnection(i.lj.name).then(o=>(0,a.mG)(this,void 0,void 0,function*(){this.sendCreateDatabase(o)}))}))})}sendCreateDatabase(e){return(0,a.mG)(this,void 0,void 0,function*(){yield e.open(),e.execute("\nCREATE TABLE IF NOT EXISTS versions (\n    id INTEGER PRIMARY KEY NOT NULL,\n    name TEXT NOT NULL,\n    number TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS sections (\n  id INTEGER PRIMARY KEY NOT NULL,\n  uid TEXT NOT NULL,\n  name TEXT NOT NULL,\n  subname TEXT NOT NULL,\n  page INTEGER NOT NULL,\n  indx INTEGER NOT NULL,\n  status INTEGER NOT NULL\n);\n\nCREATE INDEX IF NOT EXISTS sections_index_name ON sections (name);\nCREATE INDEX IF NOT EXISTS sections_index_page ON sections (page);\nCREATE INDEX IF NOT EXISTS sections_index_indx ON sections (indx);\n\nCREATE TABLE IF NOT EXISTS questions (\n  id INTEGER PRIMARY KEY NOT NULL,\n  section_id INTEGER NOT NULL,\n  uid TEXT NOT NULL,\n  sentence TEXT NOT NULL,\n  popup TEXT NOT NULL,\n  score TEXT NOT NULL,\n  cond TEXT,\n  answers TEXT NOT NULL,\n  has_evidence INTEGER NOT NULL,\n  indx INTEGER NOT NULL,\n  status INTEGER NOT NULL,\n  FOREIGN KEY (section_id) REFERENCES sections(id) ON DELETE SET DEFAULT\n);\n\nCREATE INDEX IF NOT EXISTS questions_index_section_id ON questions (section_id);\nCREATE INDEX IF NOT EXISTS questions_index_uid ON questions (uid);\nCREATE INDEX IF NOT EXISTS questions_index_indx ON questions (indx);\n\nCREATE TABLE IF NOT EXISTS auditories (\n  id INTEGER PRIMARY KEY NOT NULL,\n  user_id INTEGER NOT NULL,\n  title TEXT NOT NULL,\n  description TEXT,\n  close_note TEXT,\n  date TEXT NOT NULL,\n  time TEXT NOT NULL,\n  lat TEXT NOT NULL,\n  lng TEXT NOT NULL,\n  status INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  remote_id INTEGER\n);\n\nCREATE INDEX IF NOT EXISTS title ON auditories (title);\nCREATE INDEX IF NOT EXISTS date ON auditories (date);\n\nCREATE TABLE IF NOT EXISTS auditory_evidences (\n  id INTEGER PRIMARY KEY NOT NULL,\n  auditory_id INTEGER NOT NULL,\n  dir TEXT NOT NULL,\n  creation_date TEXT NOT NULL,\n  uploaded INTEGER,\n  FOREIGN KEY (auditory_id) REFERENCES auditories(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS answers (\n  id INTEGER PRIMARY KEY NOT NULL,\n  auditory_id INTEGER NOT NULL,\n  question_id INTEGER NOT NULL,\n  value TEXT NOT NULL,\n  notes TEXT,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  FOREIGN KEY (auditory_id) REFERENCES auditories(id) ON DELETE CASCADE\n  FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS answer_evidences (\n  id INTEGER PRIMARY KEY NOT NULL,\n  auditory_id INTEGER NOT NULL,\n  question_id INTEGER NOT NULL,\n  dir TEXT NOT NULL,\n  uploaded INTEGER,\n  creation_date TEXT NOT NULL,\n  FOREIGN KEY (auditory_id) REFERENCES auditories(id) ON DELETE CASCADE\n  FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS helmet_auditory (\n  id INTEGER PRIMARY KEY NOT NULL,\n  user_id INTEGER NOT NULL,\n  title TEXT NOT NULL,\n  description TEXT,\n  close_note TEXT,\n  date TEXT NOT NULL,\n  time TEXT NOT NULL,\n  lat TEXT NOT NULL,\n  lng TEXT NOT NULL,\n  status INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  remote_id INTEGER\n);\n\nCREATE INDEX IF NOT EXISTS title ON helmet_auditory (title);\nCREATE INDEX IF NOT EXISTS date ON helmet_auditory (date);\n\nCREATE TABLE IF NOT EXISTS helmet_auditory_evidences (\n  id INTEGER PRIMARY KEY NOT NULL,\n  helmet_auditory_id INTEGER NOT NULL,\n  dir TEXT NOT NULL,\n  creation_date TEXT NOT NULL,\n  uploaded INTEGER,\n  FOREIGN KEY (helmet_auditory_id) REFERENCES helmet_auditory(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS helmet_auditory_count (\n  id INTEGER PRIMARY KEY NOT NULL,\n  helmet_auditory_id INTEGER NOT NULL,\n  origin INTEGER NOT NULL,\n  destination INTEGER NOT NULL,\n  users_count INTEGER NOT NULL,\n  helmets_count INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  FOREIGN KEY (helmet_auditory_id) REFERENCES helmet_auditory(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS belt_auditory (\n  id INTEGER PRIMARY KEY NOT NULL,\n  user_id INTEGER NOT NULL,\n  title TEXT NOT NULL,\n  description TEXT,\n  close_note TEXT,\n  date TEXT NOT NULL,\n  time TEXT NOT NULL,\n  lat TEXT NOT NULL,\n  lng TEXT NOT NULL,\n  status INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  remote_id INTEGER\n);\n\nCREATE INDEX IF NOT EXISTS title ON belt_auditory (title);\nCREATE INDEX IF NOT EXISTS date ON belt_auditory (date);\n\nCREATE TABLE IF NOT EXISTS belt_auditory_evidences (\n  id INTEGER PRIMARY KEY NOT NULL,\n  belt_auditory_id INTEGER NOT NULL,\n  dir TEXT NOT NULL,\n  creation_date TEXT NOT NULL,\n  uploaded INTEGER,\n  FOREIGN KEY (belt_auditory_id) REFERENCES belt_auditory(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS belt_auditory_count (\n  id INTEGER PRIMARY KEY NOT NULL,\n  belt_auditory_id INTEGER NOT NULL,\n  origin INTEGER NOT NULL,\n  destination INTEGER NOT NULL,\n  adults_count INTEGER NOT NULL,\n  belts_count INTEGER NOT NULL,\n  child_count INTEGER NOT NULL,\n  chairs_count INTEGER NOT NULL,\n  coopilot INTEGER NOT NULL,\n  overuse_count INTEGER NOT NULL,\n  vehicle_type INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  FOREIGN KEY (belt_auditory_id) REFERENCES belt_auditory(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS general_count_auditory (\n  id INTEGER PRIMARY KEY NOT NULL,\n  user_id INTEGER NOT NULL,\n  title TEXT NOT NULL,\n  description TEXT,\n  close_note TEXT,\n  date TEXT NOT NULL,\n  time TEXT NOT NULL,\n  lat TEXT NOT NULL,\n  lng TEXT NOT NULL,\n  status INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  remote_id INTEGER\n);\n\nCREATE INDEX IF NOT EXISTS title ON general_count_auditory (title);\nCREATE INDEX IF NOT EXISTS date ON general_count_auditory (date);\n\nCREATE TABLE IF NOT EXISTS general_count_auditory_evidences (\n  id INTEGER PRIMARY KEY NOT NULL,\n  general_count_auditory_id INTEGER NOT NULL,\n  dir TEXT NOT NULL,\n  creation_date TEXT NOT NULL,\n  uploaded INTEGER,\n  FOREIGN KEY (general_count_auditory_id) REFERENCES general_count_auditory(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS general_count_auditory_count (\n  id INTEGER PRIMARY KEY NOT NULL,\n  general_count_auditory_id INTEGER NOT NULL,\n  count1 INTEGER NOT NULL,\n  count2 INTEGER NOT NULL,\n  count3 INTEGER NOT NULL,\n  count4 INTEGER NOT NULL,\n  count5 INTEGER NOT NULL,\n  count6 INTEGER NOT NULL,\n  count7 INTEGER NOT NULL,\n  count8 INTEGER NOT NULL,\n  count9 INTEGER NOT NULL,\n  count10 INTEGER NOT NULL,\n  count11 INTEGER NOT NULL,\n  count12 INTEGER NOT NULL,\n  creation_date TEXT NOT NULL,\n  update_date TEXT NOT NULL,\n  FOREIGN KEY (general_count_auditory_id) REFERENCES general_count_auditory(id) ON DELETE CASCADE\n);\n").then(o=>{e.execute(L).then(n=>(0,a.mG)(this,void 0,void 0,function*(){yield e.close().catch(E=>this.responseService.onError(E,"No se pudo crear la base de datos"))})).catch(n=>(0,a.mG)(this,void 0,void 0,function*(){yield e.close().catch(E=>this.responseService.onError(E,"No se pudo crear la base de datos"))}))}).catch(o=>(0,a.mG)(this,void 0,void 0,function*(){yield e.close().catch(n=>this.responseService.onError(n,"No se pudo crear la base de datos"))}))})}}return t.\u0275fac=function(e){return new(e||t)(u.LFG(_.Y),u.LFG(A.J))},t.\u0275prov=u.Yz7({token:t,factory:t.\u0275fac,providedIn:"root"}),t})()}}]);